name: Release

on:
  release:
    types: [created]

env:
  golang-version: 1.20.2
  golangci-lint-version: v1.51.2
  docker-registry: ghcr.io
  docker-image-name: ${{ github.repository }}

defaults:
  run:
    shell: bash --noprofile --norc -eo pipefail {0}

jobs:
  docker:
    name: docker
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - uses: actions/checkout@v3
      - name: Docker Build
        run: docker build . --file Dockerfile --tag ${{ env.docker-registry }}/${{ env.docker-image-name }}:${{ github.ref_name }}

      - name: Log into registry ${{ env.docker-registry }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.docker-registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Hub Push (versioned)
        run: docker push ${{ env.docker-registry }}/${{ env.docker-image-name }}:${{ github.ref_name }}

      - name: Docker Hub Push (re-tag as latest)
        run: docker tag ${{ env.docker-registry }}/${{ env.docker-image-name }}:${{ github.ref_name }} ${{ env.docker-registry }}/${{ env.docker-image-name }}:latest

      - name: Docker Hub Push (latest)
        run: docker push ${{ env.docker-registry }}/${{ env.docker-image-name }}:latest

  release:
    name: release
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write
      id-token: write

    strategy:
      matrix:
        goos: [linux, windows, darwin, freebsd]
        goarch: [amd64, arm, arm64, riscv64]
        exclude:
          - goos: darwin
            goarch: arm
          - goos: windows
            goarch: arm
          - goos: windows
            goarch: riscv64
          - goos: darwin
            goarch: riscv64

    steps:
      - uses: actions/checkout@v3
      - uses: wangyoucao577/go-release-action@v1.38
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          goos: ${{ matrix.goos }}
          goarch: ${{ matrix.goarch }}
          goversion: ${{ env.golang-version }}
          project_path: "./cmd/timescaledb-event-streamer"
          binary_name: "timescaledb-event-streamer"
          sha256sum: TRUE
          pre_command: export GODEBUG=http2client=0
          ldflags: >
            -X 'github.com/noctarius/timescaledb-event-streamer/internal/version.Branch=${{ github.ref_name }}' -X 'github.com/noctarius/timescaledb-event-streamer/internal/version.CommitHash=${{ github.sha }}'